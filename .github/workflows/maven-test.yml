name: Selenium Test Automation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering of the workflow

# Limit concurrent runs of this workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Selenium Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Set a timeout to prevent hung jobs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
        
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@v1
      
    - name: Build with Maven
      run: mvn clean compile
      
    - name: Run Tests
      run: mvn test
      
    - name: Generate Extent Reports
      if: always()
      run: |
        echo "Test reports generated at:"
        find test-output/reports -type f -name "*.html" | sort
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports-${{ github.run_id }}
        path: |
          test-output/reports/
          test-output/screenshots/
        retention-days: 14
        
    - name: Publish Test Report
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Function to get all HTML files in a directory
          function getHtmlFiles(dir) {
            const files = [];
            try {
              if (fs.existsSync(dir)) {
                fs.readdirSync(dir).forEach(file => {
                  const fullPath = path.join(dir, file);
                  if (fs.statSync(fullPath).isDirectory()) {
                    files.push(...getHtmlFiles(fullPath));
                  } else if (file.endsWith('.html')) {
                    files.push(fullPath);
                  }
                });
              }
            } catch (err) {
              console.error(`Error reading directory ${dir}:`, err);
            }
            return files;
          }
          
          // Get all HTML report files
          const reportFiles = getHtmlFiles('test-output/reports');
          
          if (reportFiles.length > 0) {
            // Create a summary of test results
            const summary = `### Test Execution Summary
          
          #### Test Reports
          ${reportFiles.map(file => `- [${path.basename(file)}](${file})`).join('\n')}
          
          #### Run Information
          - Run ID: ${context.runId}
          - Workflow: ${context.workflow}
          - Commit: ${context.sha}
          - Triggered by: ${context.actor}
          
          > Note: Download the artifacts to view the complete test reports.`;
            
            // Add the summary to the job
            await core.summary
              .addHeading('Test Execution Results')
              .addRaw(summary)
              .write();
              
            console.log('Test summary published successfully');
          } else {
            console.log('No HTML report files found');
          }